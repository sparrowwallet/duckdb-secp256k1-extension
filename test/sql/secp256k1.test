# name: test/sql/secp256k1.test
# description: test secp256k1 extension
# group: [sql]

# Before we load the extension, this will fail
statement error
SELECT secp256k1_ec_pubkey_combine([from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'), from_hex('02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5')]);
----
Catalog Error: Scalar Function with name secp256k1_ec_pubkey_combine does not exist!

# Require statement will ensure this test is run with this extension loaded
require secp256k1

# Test combining two valid compressed public keys
# Using secp256k1 generator point (0279be...) and another valid compressed pubkey
query I
SELECT secp256k1_ec_pubkey_combine([
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),
    from_hex('02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5')
]) IS NOT NULL;
----
true

# Test combining three public keys
query I
SELECT secp256k1_ec_pubkey_combine([
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),
    from_hex('02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5'),
    from_hex('03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb')
]) IS NOT NULL;
----
true

# Test with NULL input (should return NULL)
query I
SELECT secp256k1_ec_pubkey_combine(NULL);
----
NULL

# Test with invalid length input (should return NULL)
query I
SELECT secp256k1_ec_pubkey_combine([
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817'), 
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798')
]);
----
NULL

# Test with invalid public key data (should return NULL)
query I
SELECT secp256k1_ec_pubkey_combine([
    from_hex('0000000000000000000000000000000000000000000000000000000000000000000'), 
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798')
]);
----
NULL

# Test create_outpoint function with 32-byte blob and integer
query I
SELECT octet_length(create_outpoint(
    from_hex('0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'),
    1
));
----
36

# Test create_outpoint with zero integer (little-endian encoding)
query I
SELECT create_outpoint(
    from_hex('0000000000000000000000000000000000000000000000000000000000000000'),
    0
) = from_hex('000000000000000000000000000000000000000000000000000000000000000000000000');
----
true

# Test create_outpoint with integer 1 (little-endian encoding)
query I
SELECT create_outpoint(
    from_hex('0000000000000000000000000000000000000000000000000000000000000000'),
    1
) = from_hex('000000000000000000000000000000000000000000000000000000000000000001000000');
----
true

# Test create_outpoint with integer 256 (little-endian encoding)
query I
SELECT create_outpoint(
    from_hex('0000000000000000000000000000000000000000000000000000000000000000'),
    256
) = from_hex('000000000000000000000000000000000000000000000000000000000000000000010000');
----
true

# Test create_outpoint with NULL blob (should return NULL)
query I
SELECT create_outpoint(NULL, 1);
----
NULL

# Test create_outpoint with NULL integer (should return NULL)
query I
SELECT create_outpoint(from_hex('0000000000000000000000000000000000000000000000000000000000000000'), NULL);
----
NULL

# Test create_outpoint with wrong blob length (should return NULL)
query I
SELECT create_outpoint(from_hex('00000000000000000000000000000000000000000000000000000000000000'), 1);
----
NULL

# Test min_outpoint function with two outpoints
query I
SELECT min_outpoint([
    create_outpoint(from_hex('0000000000000000000000000000000000000000000000000000000000000000'), 2),
    create_outpoint(from_hex('0000000000000000000000000000000000000000000000000000000000000000'), 1)
]) = create_outpoint(from_hex('0000000000000000000000000000000000000000000000000000000000000000'), 1);
----
true

# Test min_outpoint with three outpoints (different hash prefixes)
query I
SELECT min_outpoint([
    create_outpoint(from_hex('1000000000000000000000000000000000000000000000000000000000000000'), 0),
    create_outpoint(from_hex('0100000000000000000000000000000000000000000000000000000000000000'), 0),
    create_outpoint(from_hex('2000000000000000000000000000000000000000000000000000000000000000'), 0)
]) = create_outpoint(from_hex('0100000000000000000000000000000000000000000000000000000000000000'), 0);
----
true

# Test min_outpoint with all NULL inputs (should return NULL)
query I
SELECT min_outpoint(NULL);
----
NULL

# Test min_outpoint with wrong length input (ignores invalid, returns valid)
query I
SELECT min_outpoint([
    from_hex('00000000000000000000000000000000000000000000000000000000000000000'),  -- 33 bytes (wrong)
    create_outpoint(from_hex('0000000000000000000000000000000000000000000000000000000000000000'), 1)
]) = create_outpoint(from_hex('0000000000000000000000000000000000000000000000000000000000000000'), 1);
----
true

# Test secp256k1_tagged_sha256 function basic functionality
query I
SELECT octet_length(secp256k1_tagged_sha256('test_tag', 'test_message'));
----
32

# Test secp256k1_tagged_sha256 produces different hashes for different tags
query I
SELECT secp256k1_tagged_sha256('tag1', 'message') != secp256k1_tagged_sha256('tag2', 'message');
----
true

# Test secp256k1_tagged_sha256 produces different hashes for different messages
query I
SELECT secp256k1_tagged_sha256('tag', 'message1') != secp256k1_tagged_sha256('tag', 'message2');
----
true

# Test secp256k1_tagged_sha256 is deterministic (same inputs produce same output)
query I
SELECT secp256k1_tagged_sha256('BIP0340/challenge', 'Hello') = secp256k1_tagged_sha256('BIP0340/challenge', 'Hello');
----
true

# Test secp256k1_tagged_sha256 with binary data
query I
SELECT octet_length(secp256k1_tagged_sha256('binary_test', from_hex('deadbeef')));
----
32

# Test secp256k1_tagged_sha256 with NULL tag (should return NULL)
query I
SELECT secp256k1_tagged_sha256(NULL, 'message');
----
NULL

# Test secp256k1_tagged_sha256 with NULL message (should return NULL)
query I
SELECT secp256k1_tagged_sha256('tag', NULL);
----
NULL

# Test secp256k1_tagged_sha256 with both NULL inputs (should return NULL)
query I
SELECT secp256k1_tagged_sha256(NULL, NULL);
----
NULL

# Test secp256k1_ec_pubkey_tweak_mul basic functionality
query I
SELECT octet_length(secp256k1_ec_pubkey_tweak_mul(
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),
    from_hex('0000000000000000000000000000000000000000000000000000000000000002')
));
----
33

# Test secp256k1_ec_pubkey_tweak_mul identity tweak (multiply by 1)
query I
SELECT secp256k1_ec_pubkey_tweak_mul(
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),
    from_hex('0000000000000000000000000000000000000000000000000000000000000001')
) = from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798');
----
true

# Test secp256k1_ec_pubkey_tweak_mul different tweaks produce different results
query I
SELECT secp256k1_ec_pubkey_tweak_mul(
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),
    from_hex('0000000000000000000000000000000000000000000000000000000000000002')
) != secp256k1_ec_pubkey_tweak_mul(
    from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),
    from_hex('0000000000000000000000000000000000000000000000000000000000000003')
);
----
true

# Test secp256k1_ec_pubkey_tweak_mul with NULL pubkey (should return NULL)
query I
SELECT secp256k1_ec_pubkey_tweak_mul(NULL, from_hex('0000000000000000000000000000000000000000000000000000000000000001'));
----
NULL

# Test secp256k1_ec_pubkey_tweak_mul with NULL tweak (should return NULL)
query I
SELECT secp256k1_ec_pubkey_tweak_mul(from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'), NULL);
----
NULL

# Test secp256k1_ec_pubkey_tweak_mul with wrong pubkey length (should return NULL)
query I
SELECT secp256k1_ec_pubkey_tweak_mul(from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817'), from_hex('0000000000000000000000000000000000000000000000000000000000000001'));
----
NULL

# Test secp256k1_ec_pubkey_tweak_mul with wrong tweak length (should return NULL)
query I
SELECT secp256k1_ec_pubkey_tweak_mul(from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'), from_hex('00000000000000000000000000000000000000000000000000000000000001'));
----
NULL

# Test secp256k1_ec_pubkey_tweak_mul with zero tweak (should return NULL - invalid)
query I
SELECT secp256k1_ec_pubkey_tweak_mul(from_hex('0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'), from_hex('0000000000000000000000000000000000000000000000000000000000000000'));
----
NULL

# Test int_to_big_endian basic functionality
query I
SELECT octet_length(int_to_big_endian(123));
----
4

# Test int_to_big_endian with zero
query I
SELECT int_to_big_endian(0) = from_hex('00000000');
----
true

# Test int_to_big_endian with one (big-endian format)
query I
SELECT int_to_big_endian(1) = from_hex('00000001');
----
true

# Test int_to_big_endian with 256 (big-endian format)
query I
SELECT int_to_big_endian(256) = from_hex('00000100');
----
true

# Test int_to_big_endian with 65536 (big-endian format)
query I
SELECT int_to_big_endian(65536) = from_hex('00010000');
----
true

# Test int_to_big_endian with negative number (two's complement)
query I
SELECT int_to_big_endian(-1) = from_hex('FFFFFFFF');
----
true

# Test int_to_big_endian with max 32-bit signed integer
query I
SELECT int_to_big_endian(2147483647) = from_hex('7FFFFFFF');
----
true

# Test int_to_big_endian with min 32-bit signed integer  
query I
SELECT int_to_big_endian(-2147483648) = from_hex('80000000');
----
true

# Test int_to_big_endian with NULL input (should return NULL)
query I
SELECT int_to_big_endian(NULL);
----
NULL